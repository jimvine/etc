#! /usr/bin/python3

from subprocess import Popen
import subprocess
from functions import attributes
from os import fsencode
from sys import stdout
from misc import relpath
import os.path
from sys import getfilesystemencoding

@attributes(param_types=dict(limit=int))
def main(limit, dir=os.path.curdir):
    """Searches file system for objects exceeding a given disk space"""
    
    encoding = getfilesystemencoding()
    dir = fsencode(dir)
    
    path = tuple()
    totals = list()
    
    du = "du --block-size=1 --all --one-file-system".split()
    du.append(dir)
    with Popen(du, bufsize=-1, stdout=subprocess.PIPE) as du:
        for line in du.stdout:
            if not line[:1].isdigit():
                continue
            
            (line,) = line.splitlines()
            (size, file) = line.split(b"\t", 1)
            
            size = int(size)
            newpath = (dir,) + relpath(file, dir)
            pathlen = len(newpath)
            if path[:pathlen] == newpath:
                size -= totals[pathlen - 1]
            if size < limit:
                continue
            
            pref = ""
            reduced = size
            for p in "kMGTPEZY":
                if reduced < 10000:
                    break
                reduced //= 1000
                pref = p
            line = "{} {}B\t".format(reduced, pref)
            
            try:
                med = line + file.decode(encoding) + "\n"
                line = med.encode(stdout.encoding)
            except UnicodeError:
                stdout.buffer.write(line.encode(stdout.encoding))
                stdout.buffer.write(file)
                stdout.buffer.write("\n".encode(stdout.encoding))
            else:
                stdout.buffer.write(line)
            if stdout.line_buffering:
                stdout.buffer.flush()
            
            newpath = newpath[:-1]
            i = 0
            for (old, new) in zip(path, newpath):
                if old != new:
                    break
                totals[i] += size
                i += 1
            totals[i:] = (size,) * (len(newpath) - i)
            path = newpath
    
    if du.returncode:
        raise SystemExit(du.returncode)

if __name__ == "__main__":
    from funcparams import command
    try:
        command()
    except KeyboardInterrupt:
        raise SystemExit("")
