#! /usr/bin/env python3

import sys
import os
import subprocess
import tempfile
import shutil
from subprocess import CalledProcessError
from subprocess import Popen
from os import devnull

def main():
    try:
        target = sys.argv[1]
    except IndexError:
        target = "."

    # Workaround for not being able to fusermount from a fusermount directory
    # http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=584541
    target = os.path.abspath(target)
    os.chdir("/")

    tmp = tempfile.mkdtemp(prefix="mpw")
    try:
        if not os.path.isdir(target):
            if any(target.endswith(suffix) for suffix in RAR_SUFFIXES):
                rars = (target,)
            else:
                rars = ()
                media = (target,)
            vobsubs = None
        else:
            # Seen the following rarset schemes:
            # *.rar
            # *.r00
            # *.r01
            # . . .
            # *.part01.rar
            # *.part02.rar
            # . . .
            # CD*/*
            discs = list(i for i in os.listdir(target) if i.startswith("CD"))
            if not discs:
                (rars, media) = find_media(target)
            else:
                discs.sort()
                rars = list()
                media = list()
                for disc in discs:
                    (r, m) = find_media(os.path.join(target, disc))
                    rars.extend(r)
                    media.extend(m)

            # Seen the following vobsub schemes:
            # Subs
            # Vobsubs
            #     *.rar
            #         *.idx
            #         *.sub
            #         *.rar (alongside idx file only)
            #             *.sub
            #         *{-,.}cd1.idx (alongside combined-CD files) (not implemented)
            #         *{-,.}cd1.rar (alongside combined-CD files) (not implemented)
            #         *.cd1.srt (not implemented)
            #         *a(-*).{idx,rar}
            #     *-cd1-subs.rar (not implemented)
            #         *-cd*.idx
            #         *-cd*.rar
            #     CD1/*.cd1.*.idx (not implemented)
            #     CD1/*.cd1.*.sub (not implemented)
            
            # Use only the first directory that exists
            for subsdir in ("Subs", "Vobsubs"):
                subsdir = os.path.join(target, subsdir)
                if os.path.isdir(subsdir):
                    break
            else:
                subsdir = None
            
            if subsdir is None:
                vobsubs = None
            else:
                vobsubs = []
                subs_x_count = 0
                for subs in sorted(os.listdir(subsdir)):
                    if not subs.endswith(RAR_SUFFIX):
                        continue
                    subs = os.path.join(subsdir, subs)
                    
                    # TODO: Use Python rarfile module for this
                    proc = subprocess.Popen(("unrar", "vb", "--", subs,
                        "*.sub"), stdout=subprocess.PIPE)
                    sub_count = proc.stdout.read().count(b"\n")
                    proc.stdout.close()
                    proc.wait()
                    
                    # M Player can play a *.sub file inside a Rar file, but
                    # not if there are more than one *.sub file.
                    if 1 == sub_count:
                        vobsubs.append(subs[:-len(RAR_SUFFIX)])
                    else:
                        tmpsubs = os.path.join(tmp,
                            "subs{}".format(subs_x_count))
                        subs_x_count += 1
                        
                        # TODO: Check if everything is uncompressed (using
                        # rarfile), and use rarfs instead if so
                        try:
                            subprocess.check_call(
                                "unrar x -ierr -o+ -ts -idcd --".split(" ") +
                                [subs, tmpsubs + os.path.sep])
                        except CalledProcessError:
                            continue
                        
                        # List each *.idx file, but ignore initial files if
                        # they have generalised names of subsequent files.
                        # E.g.: prefix-suffix ignored if followed by
                        # prefix-1-suffix.
                        idx_suffix = ".idx"
                        idxs = []
                        for idx in os.listdir(tmpsubs):
                            if not idx.endswith(idx_suffix):
                                continue
                            idx = idx[:-len(idx_suffix)]
                            
                            if idxs:
                                # Find common prefix and suffix lengths
                                common_len = min(len(idx), len(idxs[0]))
                                pref_len = 0
                                while (pref_len < common_len and
                                idx[pref_len] == idxs[0][pref_len]):
                                    pref_len += 1
                                suf_len = 0
                                while (suf_len < common_len and
                                idx[-suf_len - 1] == idxs[0][-suf_len - 1]):
                                    suf_len += 1
                                
                                if pref_len + suf_len >= len(idx):
                                    continue
                                elif pref_len + suf_len >= len(idxs[0]):
                                    idxs[0] = idx
                                    continue
                            
                            idxs.append(idx)
                        
                        idxs.sort()
                        vobsubs.extend(os.path.join(tmpsubs, idx)
                            for idx in idxs)
                        
                        # To fix vobsub colours:
# custom colors: ON, tridx: 0000, colors: aa5500, 000000, ffffff, 55aaff
            
            if not vobsubs:
                vobsubs = None
        
        if rars:
            play_rars(rars, tmp, vobsubs)
        else:
            mplayer(media, vobsubs)
    finally:
        shutil.rmtree(tmp)

def play_rars(rars, tmp, vobsubs=None):
    mnt_count = 0
    mnt_format = "mnt{}"
    try:
        files = list()
        for (i, rar) in enumerate(rars):
            mnt = os.path.join(tmp, mnt_format.format(i))
            os.mkdir(mnt)
            subprocess.check_call(("rarfs", rar, mnt))
            mnt_count += 1
            
            files.extend(os.path.join(mnt, file) for file in os.listdir(mnt))
        
        mplayer(files, vobsubs)
    finally:
        while mnt_count > 0:
            mnt_count -= 1
            subprocess.check_call(("fusermount", "-u",
                os.path.join(tmp, mnt_format.format(mnt_count))))

def find_media(dir):
    rar = ()
    media = list()
    for name in os.listdir(dir):
        for (prio, suffix) in enumerate(RAR_SUFFIXES):
            if name.endswith(suffix):
                if not rar or prio < rar_prio:
                    rar = (os.path.join(dir, name),)
                    rar_prio = prio
                break
        
        for suffix in (".avi",):
            if name.endswith(suffix):
                media.append(os.path.join(dir, name))
    
    media.sort()
    return (rar, media)

RAR_SUFFIX = ".rar"
RAR_SUFFIXES = (".part01" + RAR_SUFFIX, RAR_SUFFIX, ".001")

def mplayer(files, vobsubs=None):
    args = ["mplayer"]
    
    if vobsubs is not None:
        unrar = subprocess.check_output(("which", "unrar")).rstrip(b"\n")
        args.extend(("-unrarexec", unrar))
    
    args.extend(("-fixed-vo", "-fs"))
    
    if vobsubs is None:
        args.extend(files)
    else:
        delay = 0
        for (i, file) in enumerate(files):
            args.append(file)
            try:
                vobsub = vobsubs[i]
            except LookupError:
                args.extend(("-vobsub", vobsub))
                id = Popen(
                    "mplayer -identify -frames 0".split() + [files[i - 1]],
                    bufsize=-1, stdout=subprocess.PIPE, stderr=null)
                try:
                    for line in id.stdout:
                        test = b"ID_LENGTH="
                        if line.startswith(test):
                            delay += float(line[len(test):])
                            break
                    else:
                        raise ValueError(
                            "{}: ID_LENGTH not given".format(files[i - 1]))
                finally:
                    # Drain stdout before closing, otherwise M Player crashes
                    # and leaves a daemon running
                    while id.stdout.read(0x10000):
                        pass
                    
                    id.stdout.close()
                    id.wait()
                args.extend(("-subdelay", str(delay)))
            else:
                args.extend(("-vobsub", vobsub))
    
    subprocess.check_call(args)

null = open(devnull, "w")

if "__main__" == __name__: main()
